generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
}

enum Visibility {
  public
  private
}

enum Status {
  Pending
  Parsing
  Parsed
  Failed
  Retrying
  Error
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
}

model Secrets {
  id                   String    @id @default(cuid())
  password             String?
  lastSignedIn         DateTime?
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[]  @default([])
  refreshToken         String?
  resetToken           String?   @unique
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String     @id @default(cuid())
  title      String
  slug       String
  data       Json       @default("{}")
  visibility Visibility @default(private)
  locked     Boolean    @default(false)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  chats      Chat[]
  Message    Message[]
  status             Status    @default(Pending) // Add the status field
  retries            Int       @default(0) // Add the retries field
  originalDocumentURL String?   // Add the originalDocumentURL field

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Chat {
  id              String    @id @default(cuid())
  sessionId        String    @unique
  resumeId        String
  resume          Resume    @relation(fields: [resumeId], references: [id])
  createdAt      DateTime
  lastMessageAt DateTime
  messages        Message[]
}

model Message {
  id         String   @id @default(cuid())
  chatId    String
  chat       Chat     @relation(fields: [chatId], references: [id])
  // Updated fields for sender identification
  senderId  String? // If the sender is a resume (bot), nullable for anonymous user
  text       String
  createdAt DateTime

  // Define an explicit relation to Resume without expecting a back relation
  senderResume Resume? @relation(fields: [senderId], references: [id], onDelete: SetNull)
}
